/*
 * MIT License
 *
 * Copyright (c) 2022-2023 TweetWallFX
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

rootProject.name=rootProjectName

// enforce minimum JDK version
if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
    throw new GradleException("Building with Java major version prior to 17 is not supported.")
}

def tweetwallFxProject = [
    new File(rootDir, '../TweetwallFX'),
    new File(rootDir, '.tweetwallFX-core'),
].find{it.isDirectory()}

if (tweetwallFxProject) {
    includeBuild tweetwallFxProject
}

def rootDirPath = rootDir.path
def projectNames = [] as TreeSet
rootDir.eachFileRecurse(groovy.io.FileType.FILES) {f ->
    String fPath = f.path
    if (fPath.contains(File.separator + '.')) {
        return
    } else if (fPath.contains(File.separator + '_')) {
        return
    } else if (fPath.contains(File.separator + 'build' + File.separator)) {
        return
    }
    if (f.isFile() && (f.name == 'build.gradle') && (f.parentFile.path != rootDirPath)) {
        def n = f.parentFile.path.substring(rootDirPath.length() + 1).replace('/', ':')
        include n
        projectNames.add n
        def n2 = ''
        n.split(':').each{
            if (n2) {
                n2 += ':'
            }
            n2 += it
            projectNames << n2
        }
    }
}

projectNames.addAll(projectNames.
        findAll{it.lastIndexOf(':') > 0}.
        collect{it.substring(0, it.lastIndexOf(':'))})

projectNames.each{n ->
    project(':' + n).name = rootProject.name + '-' + n.replace(':', '-')
}
